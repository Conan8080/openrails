diff --git a/Source/RunActivity/RunActivity.csproj b/Source/RunActivity/RunActivity.csproj
index f893d17..0cfd826 100644
--- a/Source/RunActivity/RunActivity.csproj
+++ b/Source/RunActivity/RunActivity.csproj
@@ -80,6 +80,7 @@
     <Reference Include="System.Data" />
     <Reference Include="System.Drawing" />
     <Reference Include="System.Management" />
+    <Reference Include="System.Web" />
     <Reference Include="System.Windows.Forms" />
     <Reference Include="System.Xml" />
   </ItemGroup>
@@ -188,6 +189,7 @@
     <Compile Include="Viewer3D\Viewer.cs" />
     <Compile Include="Viewer3D\Water.cs" />
     <Compile Include="Viewer3D\Weather.cs" />
+    <Compile Include="Viewer3D\WebServices\WebApi.cs" />
     <Compile Include="Viewer3D\WebServices\WebServer.cs" />
     <Compile Include="Viewer3D\Wire.cs" />
     <Compile Include="Viewer3D\World.cs" />
@@ -342,19 +344,6 @@
     <Content Include="Readme_ORNewYear_MG.txt">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </Content>
-    <Content Include="Viewer3D\WebServices\Web\css\hud.css" />
-    <Content Include="Viewer3D\WebServices\Web\css\sample.css" />
-    <Content Include="Viewer3D\WebServices\Web\css\trackmonitor.css" />
-    <Content Include="Viewer3D\WebServices\Web\HUD.html" />
-    <Content Include="Viewer3D\WebServices\Web\images\or_logo.png" />
-    <Content Include="Viewer3D\WebServices\Web\images\waverley.jpg" />
-    <Content Include="Viewer3D\WebServices\Web\images\zig-zag.jpg" />
-    <Content Include="Viewer3D\WebServices\Web\index - ApiSample.html" />
-    <Content Include="Viewer3D\WebServices\Web\index.html" />
-    <Content Include="Viewer3D\WebServices\Web\js\ApiSample.js" />
-    <Content Include="Viewer3D\WebServices\Web\js\ApiTrainInfo.js" />
-    <Content Include="Viewer3D\WebServices\Web\js\hud.js" />
-    <Content Include="Viewer3D\WebServices\Web\js\trackmonitor.js" />
   </ItemGroup>
   <ItemGroup>
     <ProjectReference Include="..\Orts.ExternalDevices\Orts.ExternalDevices.csproj">
@@ -427,6 +416,8 @@
     </PreBuildEvent>
     <PostBuildEvent>echo $Revision: 000 $&gt;Revision.txt
 date /t&gt;&gt;Revision.txt
-time /t&gt;&gt;Revision.txt</PostBuildEvent>
+time /t&gt;&gt;Revision.txt
+XCOPY "$(SolutionDir)RunActivity\Viewer3D\WebServices\Web" "$(TargetDir)Content\Web" /s /i /y
+    </PostBuildEvent>
   </PropertyGroup>
 </Project>
\ No newline at end of file
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/css/hud.css b/Source/RunActivity/Viewer3D/WebServices/Web/API/HUD/index.css
similarity index 100%
rename from Source/RunActivity/Viewer3D/WebServices/Web/css/hud.css
rename to Source/RunActivity/Viewer3D/WebServices/Web/API/HUD/index.css
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/API/HUD/index.html b/Source/RunActivity/Viewer3D/WebServices/Web/API/HUD/index.html
new file mode 100644
index 0000000..bc6f7eb
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/API/HUD/index.html
@@ -0,0 +1,55 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+	<meta charset="utf-8"/>
+	<meta name="viewport" content="width=device-width, initial-scale=1"><!-- adds zooming for mobiles -->
+	<title>OR: Heads Up Display (HUD) - Common Page</title>
+	<link rel="shortcut icon" type="image/png" href="/or_logo.png"><!-- This icon appears in the page's tab and its bookmark. -->
+	<link rel="stylesheet" type="text/css" href="/index.css"><!-- share styles with home page -->
+  <link rel="stylesheet" type="text/css" href="index.css">
+	<script src="index.js"></script>
+</head>
+
+<body onload="poll(500)" ><!-- 500 mSec is the default and may be omitted -->
+  <ul>
+    <li><a id="common">Common</a></li>
+    <li><a id="consist">Consist</a></li>
+    <li><a id="locomotive">Locomotive</a></li>
+    <li><a id="brake">Brake</a></li>
+    <li><a id="force">Force</a></li>
+    <li><a id="dispatcher">Dispatcher</a></li>
+    <li><a id="debug">Debug</a></li>
+  </ul>
+  <div id=menu><a href="/">Back to Menu</a></div>
+  <h2>Open Rails - Heads Up Display</h2>
+  <br><div id="HUDCommon"></div>
+  <br><h2 id="ExtraHeading"></h2>
+  <br><div id="HUDExtra"></div>
+<script>
+document.getElementById("common").onclick = function (){
+	pageNo = 0;
+}
+document.getElementById("consist").onclick = function (){
+	pageNo = 1;
+}
+document.getElementById("locomotive").onclick = function (){
+	pageNo = 2;
+}
+document.getElementById("brake").onclick = function (){
+	pageNo = 3;
+}
+document.getElementById("force").onclick = function (){
+	pageNo = 4;
+}
+document.getElementById("dispatcher").onclick = function (){
+	pageNo = 5;
+}
+document.getElementById("debug").onclick = function (){
+	pageNo = 6;
+}
+</script>
+</body>
+</html>
+
+
+
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/API/HUD/index.js b/Source/RunActivity/Viewer3D/WebServices/Web/API/HUD/index.js
new file mode 100644
index 0000000..908b714
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/API/HUD/index.js
@@ -0,0 +1,101 @@
+// COPYRIGHT 2009, 2010, 2011, 2012, 2013, 2014 by the Open Rails project.
+//
+// This file is part of Open Rails.
+//
+// Open Rails is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Open Rails is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.
+//
+// Based on original work by Dan Reynolds 2017-12-21
+
+// Using XMLHttpRequest rather than fetch() as:
+// 1. it is more widely supported (e.g. Internet Explorer and various tablets)
+// 2. It doesn't hide some returning error codes
+// 3. We don't need the ability to chain promises that fetch() offers.
+
+var hr = new XMLHttpRequest;
+var httpCodeSuccess = 200;
+var xmlHttpRequestCodeDone = 4;
+
+var idleMs = 500; // default idle time between calls
+function poll(initialIdleMs) {
+	if (initialIdleMs != null)
+		idleMs = initialIdleMs; // Save it to use at end
+	
+	api();
+	
+	// setTimeout() used instead of setInterval() to avoid overloading the browser's queue.
+	// (It's not true recursion, so it won't blow the stack.)
+	setTimeout(poll, idleMs); // In this call, initialIdleMs == null
+}
+
+var pageNo = 0;
+
+function api() {
+	// If this file is located in folder /API/<API_name>/, then Open Rails will call the API with the signature "/API/<API_name"
+
+	// GET preferred over POST as Internet Explorer may then fail intermittently with network error 00002eff
+	// hr.open("post", "call_API", true);
+	// hr.send("pageno="+pageNo);
+	hr.open("GET", "call_API?pageNo="+pageNo, true);
+	hr.send();
+	
+	hr.onreadystatechange = function () {
+		if (this.readyState == xmlHttpRequestCodeDone && this.status == httpCodeSuccess) {
+			var obj = JSON.parse(hr.responseText);
+			if (obj != null) // Can happen using IEv11
+			{
+				var rows = obj.commonTable.nRows;
+				var cols = obj.commonTable.nCols;
+				Str = "<table>";  
+				var next = 0;
+				for (var row = 0; row < obj.commonTable.nRows; ++row) {
+					Str += "<tr>";
+					for (var col=0; col < obj.commonTable.nCols; ++col) { 
+						if (obj.commonTable.values[next] == null) {
+							Str += "<td></td>";
+						}
+						else {
+							Str += "<td>" + obj.commonTable.values[next] + "</td>";
+						}
+						++next;
+					}
+					Str += "</tr>";
+				}
+				Str += "</table>";
+				HUDCommon.innerHTML = Str;
+
+				if (obj.nTables == 2) {
+					var rows = obj.extraTable.nRows;
+					var cols = obj.extraTable.nCols;
+					next = 0;
+					Str = "<table>";  
+					for (var row = 0; row < obj.extraTable.nRows; ++row) {
+						Str += "<tr>";
+						for (var col=0; col < obj.extraTable.nCols; ++col) { 
+							if (obj.extraTable.values[next] == null) {
+								Str += "<td></td>";
+							}
+							else {
+								Str += "<td>"  + obj.extraTable.values[next] + "</td>";
+							}
+							++next;
+						}
+						Str += "</tr>";
+					}
+					Str += "</table>";
+					HUDExtra.innerHTML = Str;
+				}
+			}
+		}
+	}
+}
\ No newline at end of file
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/API/Template/index.html b/Source/RunActivity/Viewer3D/WebServices/Web/API/Template/index.html
new file mode 100644
index 0000000..41010bb
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/API/Template/index.html
@@ -0,0 +1,46 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+	<title>OR: API Template</title>
+    <link rel="stylesheet" type="text/css" href="/index.css"><!-- share styles with home page -->
+	<script src="index.js"></script>
+</head>
+
+<body onload="poll(500)" ><!-- 500 mSec is the default and may be omitted -->
+  <div id=menu><a href="/">Back to Menu</a></div>
+  <h1>Open Rails - API Template</h1>
+
+    <b>Sample Boolean:</b>
+    <div id="boolData"></div><br />
+    <b>Sample Integer:</b>
+    <div id="intData"></div><br />
+    <b>Sample Float:</b>
+    <div id="floatData"></div><br />
+    <b>Sample String:</b>
+    <div id="strData"></div><br />
+    <b>Sample Date:</b>
+    <div id="dateData"></div><br />
+
+    <b>Sample Custom Object:</b><br />
+    <b>- String:</b>
+    <div id="customObjectStr"></div>
+    <b>- Integer:</b>
+    <div id="customObjectInt"></div><br />
+
+    <b>Sample String Array:</b>
+    <div id="arrayItem0"></div>
+    <div id="arrayItem1"></div>
+    <div id="arrayItem2"></div>
+    <div id="arrayItem3"></div>
+    <div id="arrayItem4"></div><br />
+
+    <b>Sample List of Integers:</b>
+    <div id="intList0"></div>
+    <div id="intList1"></div>
+    <div id="intList2"></div>
+
+</body>
+</html>
+
+
+
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/API/Template/index.js b/Source/RunActivity/Viewer3D/WebServices/Web/API/Template/index.js
new file mode 100644
index 0000000..125b85c
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/API/Template/index.js
@@ -0,0 +1,81 @@
+﻿// COPYRIGHT 2009, 2010, 2011, 2012, 2013, 2014 by the Open Rails project.
+//
+// This file is part of Open Rails.
+//
+// Open Rails is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Open Rails is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.
+//
+// Based on original work by Dan Reynolds 2017-12-21
+
+// Using XMLHttpRequest rather than fetch() as:
+// 1. it is more widely supported (e.g. Internet Explorer and various tablets)
+// 2. It doesn't hide some returning error codes
+// 3. We don't need the ability to chain promises that fetch() offers.
+
+var hr = new XMLHttpRequest;
+var httpCodeSuccess = 200;
+var xmlHttpRequestCodeDone = 4;
+
+var idleMs = 500; // default idle time between calls
+function poll(initialIdleMs) {
+	if (initialIdleMs != null)
+		idleMs = initialIdleMs; // Save it to use at end
+	
+	api();
+	
+	// setTimeout() used instead of setInterval() to avoid overloading the browser's queue.
+	// (It's not true recursion, so it won't blow the stack.)
+	setTimeout(poll, idleMs); // In this call, initialIdleMs == null
+}
+
+function api() {
+	// If this file is located in folder /API/<API_name>/, then Open Rails will call the API with the signature "/API/<API_name"
+
+	// GET preferred over POST as Internet Explorer may then fail intermittently with network error 00002eff
+	// hr.open("post", "call_API", true);
+	// hr.send();
+	hr.open("GET", "call_API", true);
+	hr.send();
+	hr.onreadystatechange = function () {
+		if (this.readyState == xmlHttpRequestCodeDone && this.status == httpCodeSuccess) {
+			var obj = JSON.parse(hr.responseText);
+			if (obj != null) // Can happen using IEv11
+			{
+				var obj = JSON.parse(hr.responseText);
+				
+				// Shows a way to pass various data types and arrays and lists to HTML
+				// Recommend Vue.js for anything complex
+				boolData.innerHTML = obj.boolData;
+				intData.innerHTML = obj.intData;
+				floatData.innerHTML = obj.floatData;
+				strData.innerHTML = obj.strData;
+				dateData.innerHTML = obj.dateData;
+
+				customObjectStr.innerHTML = obj.customObject.Str;
+				customObjectInt.innerHTML = obj.customObject.Int;
+
+				arrayData = obj.strArrayData;
+				arrayItem0.innerHTML = obj.strArrayData[0];
+				arrayItem1.innerHTML = obj.strArrayData[1];
+				arrayItem2.innerHTML = obj.strArrayData[2];
+				arrayItem3.innerHTML = obj.strArrayData[3];
+				arrayItem4.innerHTML = obj.strArrayData[4];
+
+				intList = obj.intList;
+				intList0.innerHTML = obj.intList[0];
+				intList1.innerHTML = obj.intList[1];
+				intList2.innerHTML = obj.intList[2];
+			}
+		}
+	}
+}
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/API/TrackMonitor/index.html b/Source/RunActivity/Viewer3D/WebServices/Web/API/TrackMonitor/index.html
new file mode 100644
index 0000000..f2273ea
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/API/TrackMonitor/index.html
@@ -0,0 +1,28 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+	<title>OR: Track Monitor API</title>
+	<link rel="shortcut icon" type="image/png" href="/or_logo.png"><!-- This icon appears in the page's tab and its bookmark. -->
+    <link rel="stylesheet" type="text/css" href="/index.css"><!-- share styles with home page -->
+	<script src="index.js"></script>
+</head>
+
+<body onload="poll(500)" ><!-- 500 mSec is the default and may be omitted -->
+  <div id=menu><a href="/">Back to Menu</a></div>
+  <h1>Open Rails - Track Monitor (F4)</h1>
+
+  <div>
+    <table style="padding-left: 50px;">
+      <tr><td>Speed:          </td><td id=speedMpS>               </td><td>mph</td></tr>
+      <tr><td>Projected:      </td><td id=projectedSpeedMpS>      </td><td>mph</td></tr>
+      <tr><td>Limit:          </td><td id=allowedSpeedMpS>        </td><td>mph</td></tr>
+      <tr><td>Mode:           </td><td id=controlMode>            </td><td>   </td></tr>
+      <tr><td>Inclination:    </td><td id=currentElevationPercent></td><td>%  </td></tr>
+      <tr><td>Direction:      </td><td id=direction>              </td><td>   </td></tr>
+      <tr><td>Cab Orientation:</td><td id=cabOrientation>         </td><td>   </td></tr>
+      <tr><td>On Path:        </td><td id=isOnPath>               </td><td>   </td></tr>
+    </table>
+  </div>
+
+</body>
+</html>
\ No newline at end of file
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/API/TrackMonitor/index.js b/Source/RunActivity/Viewer3D/WebServices/Web/API/TrackMonitor/index.js
new file mode 100644
index 0000000..66b354a
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/API/TrackMonitor/index.js
@@ -0,0 +1,68 @@
+﻿// COPYRIGHT 2009, 2010, 2011, 2012, 2013, 2014 by the Open Rails project.
+//
+// This file is part of Open Rails.
+//
+// Open Rails is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Open Rails is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.
+//
+// Based on original work by Dan Reynolds 2017-12-21
+
+// Using XMLHttpRequest rather than fetch() as:
+// 1. it is more widely supported (e.g. Internet Explorer and various tablets)
+// 2. It doesn't hide some returning error codes
+// 3. We don't need the ability to chain promises that fetch() offers.
+
+var hr = new XMLHttpRequest;
+var httpCodeSuccess = 200;
+var xmlHttpRequestCodeDone = 4;
+
+var idleMs = 500; // default idle time between calls
+function poll(initialIdleMs) {
+	if (initialIdleMs != null)
+		idleMs = initialIdleMs; // Save it to use at end
+	
+	api();
+	
+	// setTimeout() used instead of setInterval() to avoid overloading the browser's queue.
+	// (It's not true recursion, so it won't blow the stack.)
+    setTimeout(poll, idleMs); // In this call, initialIdleMs == null
+}
+
+function api() {
+	// If this file is located in folder /API/<API_name>/, then Open Rails will call the API with the signature "/API/<API_name"
+
+	// GET preferred over POST as Internet Explorer may then fail intermittently with network error 00002eff
+	// hr.open("post", "call_API", true);
+	// hr.send(""");
+	hr.open("GET", "call_API", true);
+	hr.send();
+	
+	hr.onreadystatechange = function () {
+		if (this.readyState == xmlHttpRequestCodeDone && this.status == httpCodeSuccess) {
+			var obj = JSON.parse(hr.responseText);
+			if (obj != null) // Can happen using IEv11
+			{
+                controlMode.innerHTML = modes[obj.controlMode];
+                speedMpS.innerHTML = obj.speedMpS.toFixed(1);
+                projectedSpeedMpS.innerHTML = obj.projectedSpeedMpS.toFixed(1);
+                allowedSpeedMpS.innerHTML = obj.allowedSpeedMpS.toFixed(1);
+                currentElevationPercent.innerHTML = obj.currentElevationPercent.toFixed(1);
+                direction.innerHTML = obj.direction;
+                cabOrientation.innerHTML = obj.cabOrientation;
+                isOnPath.innerHTML = obj.isOnPath;
+            }
+		}
+	}
+}
+
+modes = ["AUTO_SIGNAL", "AUTO_NODE", "MANUAL", "EXPLORER", "OUT_OF_CONTROL", "INACTIVE", "TURNTABLE", "UNDEFINED"];
\ No newline at end of file
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/HUD.html b/Source/RunActivity/Viewer3D/WebServices/Web/HUD.html
deleted file mode 100644
index 48fdb20..0000000
--- a/Source/RunActivity/Viewer3D/WebServices/Web/HUD.html
+++ /dev/null
@@ -1,52 +0,0 @@
-<!DOCTYPE HTML>
-<html>
-<head>
-	<title>OPEN RAILS - Heads Up Display - Common Page</title>
-    <link rel="stylesheet" type="text/css" href="css/hud.css">
-	<script src="js/hud.js"></script>
-</head>
-
-<body onload="setInterval (HeadsUp, 500)" >
-
-<ul>
-  <li><a id="common">Common</a></li>
-  <li><a id="consist">Consist</a></li>
-  <li><a id="locomotive">Locomotive</a></li>
-  <li><a id="brake">Brake</a></li>
-  <li><a id="force">Force</a></li>
-  <li><a id="dispatcher">Dispatcher</a></li>
-  <li><a id="debug">Debug</a></li>
-</ul>
-<br><h2>Open Rails - Heads Up Display</h2>
-<br><div id="HUDCommon"></div>
-<br><h2 id="ExtraHeading"></h2>
-<br><div id="HUDExtra"></div>
-<br>
-<script>
-document.getElementById("common").onclick = function (){
-	PageNo = 0;
-}
-document.getElementById("consist").onclick = function (){
-	PageNo = 1;
-}
-document.getElementById("locomotive").onclick = function (){
-	PageNo = 2;
-}
-document.getElementById("brake").onclick = function (){
-	PageNo = 3;
-}
-document.getElementById("force").onclick = function (){
-	PageNo = 4;
-}
-document.getElementById("dispatcher").onclick = function (){
-	PageNo = 5;
-}
-document.getElementById("debug").onclick = function (){
-	PageNo = 6;
-}
-</script>
-</body>
-</html>
-
-
-
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/css/sample.css b/Source/RunActivity/Viewer3D/WebServices/Web/css/sample.css
deleted file mode 100644
index 2839e1b..0000000
--- a/Source/RunActivity/Viewer3D/WebServices/Web/css/sample.css
+++ /dev/null
@@ -1,26 +0,0 @@
-ul {
-   list-style-type: none;
-	margin: 0;
-	padding: 0;
-	overflow: hidden;
-	background-color: #333;
-}
-li {
-	float: left;
-	border-right:1px solid #bbb;
-}
-li:last-child {
-	border-right: none;
-}
-li a {
-	display: block;
-	color: white;
-	text-align: center;
-	padding: 14px 16px;
-	text-decoration: none;
-}
-li a:hover:not(.active) {
-	background-color: #111;
-}
-
-
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/css/trackmonitor.css b/Source/RunActivity/Viewer3D/WebServices/Web/css/trackmonitor.css
deleted file mode 100644
index 2839e1b..0000000
--- a/Source/RunActivity/Viewer3D/WebServices/Web/css/trackmonitor.css
+++ /dev/null
@@ -1,26 +0,0 @@
-ul {
-   list-style-type: none;
-	margin: 0;
-	padding: 0;
-	overflow: hidden;
-	background-color: #333;
-}
-li {
-	float: left;
-	border-right:1px solid #bbb;
-}
-li:last-child {
-	border-right: none;
-}
-li a {
-	display: block;
-	color: white;
-	text-align: center;
-	padding: 14px 16px;
-	text-decoration: none;
-}
-li a:hover:not(.active) {
-	background-color: #111;
-}
-
-
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/index - ApiSample.html b/Source/RunActivity/Viewer3D/WebServices/Web/index - ApiSample.html
deleted file mode 100644
index 9e297fa..0000000
--- a/Source/RunActivity/Viewer3D/WebServices/Web/index - ApiSample.html	
+++ /dev/null
@@ -1,38 +0,0 @@
-<!DOCTYPE HTML>
-<html>
-<head>
-	<title>OPEN RAILS - Sample API</title>
-    <link rel="stylesheet" type="text/css" href="css/sample.css">
-	<script src="js/apisample.js"></script>
-</head>
-
-<body onload="setInterval (ApiSample, 500)">
-    <br><h2>Open Rails Web Server - Api Sample</h2>
-
-
-    <b>Sample String Data:</b>
-    <div id="strData"></div><br />
-    <b>Sample Integer Data:</b>
-    <div id="intData"></div><br />
-    <b>Date Data:</b>
-    <div id="dateData"></div><br />
-
-    <b>String Array Members:</b>
-    <div id="arrayMember0"></div>
-    <div id="arrayMember1"></div>
-    <div id="arrayMember2"></div>
-    <div id="arrayMember3"></div>
-    <div id="arrayMember4"></div><br />
-
-    <b>Embedded Class:</b><br />
-    <b>Embedded String Data:</b>
-    <div id="embeddedStr"></div><br />
-    <b>Embedded Integer Data:</b>
-    <div id="embeddedNumb"></div><br />
-
-
-</body>
-</html>
-
-
-
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/index.css b/Source/RunActivity/Viewer3D/WebServices/Web/index.css
new file mode 100644
index 0000000..3db2616
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/index.css
@@ -0,0 +1,7 @@
+/* index.css */
+body {
+  font-family: Verdana, Helvetica, sans-serif;
+}
+#menu {
+  padding: 20px; 
+}
\ No newline at end of file
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/index.html b/Source/RunActivity/Viewer3D/WebServices/Web/index.html
index ac7c210..8c64211 100644
--- a/Source/RunActivity/Viewer3D/WebServices/Web/index.html
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/index.html
@@ -1,18 +1,18 @@
 <!DOCTYPE HTML>
-<html>
+<html lang="en">
 <head>
-	<title>OPEN RAILS - TrainInfo API</title>
-    <link rel="stylesheet" type="text/css" href="css/sample.css">
-	<script src="js/apitraininfo.js"></script>
+	<meta charset="utf-8"/>
+	<meta name="viewport" content="width=device-width, initial-scale=1"><!-- adds zooming for mobiles -->
+	<title>Open Rails - Web Interface</title>
+	<link rel="shortcut icon" type="image/png" href="or_logo.png"><!-- This icon appears in the page's tab and its bookmark. -->
+  <link rel="stylesheet" type="text/css" href="index.css">
 </head>
 
-<body onload="setInterval (ApiTrainInfo, 500)">
-    <br><h2>Open Rails Web Server - Api TrainInfo</h2>
-
-    <div id="strTrainInfoData"></div><br />
-
-</body>
-</html>
-
-
-
+<body>
+	<h1>Open Rails - Web Interface</h1>
+<ul>
+  <li><a href="/API/HUD/index.html">Head Up Display (HUD)</a></li>
+  <li><a href="/API/TrackMonitor/index.html">Track Monitor (F4)</a></li>
+  <li><a href="/API/Template/index.html">API Template</a></li>
+</ul>
+</body
\ No newline at end of file
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/js/ApiSample.js b/Source/RunActivity/Viewer3D/WebServices/Web/js/ApiSample.js
deleted file mode 100644
index 284449a..0000000
--- a/Source/RunActivity/Viewer3D/WebServices/Web/js/ApiSample.js
+++ /dev/null
@@ -1,27 +0,0 @@
-﻿var PageNo = 0;
-var hr = new XMLHttpRequest;
-
-function ApiSample() {
-	hr.open("POST", "/API/APISAMPLE", true);
-	hr.send("pageno=" + PageNo);
-	hr.onreadystatechange = function () {
-		if (this.readyState == 4 && this.status == 200) {
-			var obj = JSON.parse(hr.responseText);
-            strData.innerHTML = obj.strData;
-            intData.innerHTML = obj.intData;
-            dateData.innerHTML = obj.dateData;
-
-            arrayData = obj.strArrayData;
-
-            arrayMember0.innerHTML = obj.strArrayData[0];
-            arrayMember1.innerHTML = obj.strArrayData[1];
-            arrayMember2.innerHTML = obj.strArrayData[2];
-            arrayMember3.innerHTML = obj.strArrayData[3];
-            arrayMember4.innerHTML = obj.strArrayData[4];
-
-            embeddedStr.innerHTML = obj.embedded.Str;
-            embeddedNumb.innerHTML = obj.embedded.Numb;
-
-		}
-	}
-}
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/js/ApiTrainInfo.js b/Source/RunActivity/Viewer3D/WebServices/Web/js/ApiTrainInfo.js
deleted file mode 100644
index 5b91bfd..0000000
--- a/Source/RunActivity/Viewer3D/WebServices/Web/js/ApiTrainInfo.js
+++ /dev/null
@@ -1,15 +0,0 @@
-﻿var PageNo = 0;
-var hr = new XMLHttpRequest;
-
-function ApiTrainInfo() {
-    hr.open("POST", "/API/TRAININFO", true);
-    hr.send("pageno=" + PageNo);
-    hr.onreadystatechange = function () {
-        if (this.readyState == 4 && this.status == 200) {
-            var obj = JSON.parse(hr.responseText);
-
-            strTrainInfoData.innerHTML = obj.allowedSpeedMps;
-
-        }
-    }
-}
\ No newline at end of file
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/js/hud.js b/Source/RunActivity/Viewer3D/WebServices/Web/js/hud.js
deleted file mode 100644
index b13effc..0000000
--- a/Source/RunActivity/Viewer3D/WebServices/Web/js/hud.js
+++ /dev/null
@@ -1,55 +0,0 @@
-var PageNo = 0;
-var hr = new XMLHttpRequest;
-
-
-function HeadsUp () {
-	hr.open("POST", "/API/HUD", true);
-	hr.send("pageno="+PageNo);
-	hr.onreadystatechange = function () {
-		if (this.readyState == 4 && this.status == 200) {
-			var obj = JSON.parse(hr.responseText);
-			var Rows = obj.commonTable.nRows;
-			var Cols = obj.commonTable.nCols;
-			Str = "<table>";  
-			var next = 0;
-			for (var row = 0; row < obj.commonTable.nRows; ++row) {
-				Str += "<tr>";
-				for (var col=0; col < obj.commonTable.nCols; ++col) { 
-					if (obj.commonTable.values[next] == null) {
-						Str += "<td></td>";
-					}
-					else {
-						Str += "<td>" + obj.commonTable.values[next] + "</td>";
-					}
-					++next;
-				}
-				Str += "</tr>";
-			}
-			Str += "</table>";
-			HUDCommon.innerHTML = Str;
-
-			if (obj.nTables == 2) {
-				var Rows = obj.extraTable.nRows;
-				var Cols = obj.extraTable.nCols;
-				next = 0;
-				Str = "<table>";  
-				for (var row = 0; row < obj.extraTable.nRows; ++row) {
-					Str += "<tr>";
-					for (var col=0; col < obj.extraTable.nCols; ++col) { 
-						if (obj.extraTable.values[next] == null) {
-							Str += "<td></td>";
-						}
-						else {
-							Str += "<td>"  + obj.extraTable.values[next] + "</td>";
-						}
-						++next;
-					}
-					Str += "</tr>";
-				}
-				Str += "</table>";
-				HUDExtra.innerHTML = Str;
-			}
-		}
-	}
-}
-
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/js/trackmonitor.js b/Source/RunActivity/Viewer3D/WebServices/Web/js/trackmonitor.js
deleted file mode 100644
index 337a8ac..0000000
--- a/Source/RunActivity/Viewer3D/WebServices/Web/js/trackmonitor.js
+++ /dev/null
@@ -1,16 +0,0 @@
-var PageNo = 0;
-var hr = new XMLHttpRequest;
-
-
-function TrackMonitor () {
-    hr.open("POST", "/API/TRACKMONITOR", true);
-    hr.send("pageno=" + PageNo);
-	hr.onreadystatechange = function () {
-		if (this.readyState == 4 && this.status == 200) {
-			var obj = JSON.parse(hr.responseText);
-			var Str = obj.str;  
-			common.innerHTML = Str;
-		}
-	}
-}
-
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/or_logo.png b/Source/RunActivity/Viewer3D/WebServices/Web/or_logo.png
new file mode 100644
index 0000000..4023551
Binary files /dev/null and b/Source/RunActivity/Viewer3D/WebServices/Web/or_logo.png differ
diff --git a/Source/RunActivity/Viewer3D/WebServices/WebApi.cs b/Source/RunActivity/Viewer3D/WebServices/WebApi.cs
new file mode 100644
index 0000000..182d254
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/WebApi.cs
@@ -0,0 +1,213 @@
+﻿// COPYRIGHT 2009 - 2020 by the Open Rails project.
+//
+// This file is part of Open Rails.
+//
+// Open Rails is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Open Rails is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.
+//
+// Based on original work by Dan Reynolds 2017-12-21
+
+/* To add your own API:
+ * - Add a new #region, like /API/TrackMonitor/ below.
+ * - Code a method like ApiTrackMonitor below.
+ * - In the constructor for WebApi(), add an entry into ApiDict
+ * - Add a folder into RunActivity\WebServices\Web\API\
+ * - Add index.html, index.js and perhaps index.css into that folder using \API\Template\index.* as a template
+ */
+
+
+
+using Orts.Simulation.Physics;
+using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+
+namespace Orts.Viewer3D.WebServices
+{
+    public class WebApi
+    {
+        // API routing classes & functions
+        public static Dictionary<string, Func<string, object>> ApiDict = new Dictionary<string, Func<string, object>>(StringComparer.InvariantCultureIgnoreCase);
+
+        // Viewer object from Viewer3D - needed by APIs that access data from windows in Viewer3D\Popups\*
+        public Viewer Viewer;
+
+        public WebApi()
+        {
+            // "127.0.0.1:2150/API/HUD/" is the URL, "ApiHud" is the name of the method that gets called.
+            ApiDict.Add("/API/HUD/", ApiHud);
+            ApiDict.Add("/API/TEMPLATE/", ApiTemplate);
+            ApiDict.Add("/API/TRACKMONITOR/", ApiTrackMonitor);
+        }
+
+        #region /API/Template/
+        // Shows a way to pass various data types and arrays and lists to HTML
+        public class CustomObject
+        {
+            public string Str;
+            public int Int;
+        }
+
+        public class ApiTemplateModel
+        {
+            public bool boolData;
+            public int intData;
+            public float floatData;
+            public string strData;
+            public DateTime dateData;
+            public CustomObject customObject;
+            public string[] strArrayData;
+            public List<int> intList;
+        }
+
+        public object ApiTemplate(string Parameters)
+        {
+            var sampleData = new ApiTemplateModel();
+
+            sampleData.boolData = true;
+            sampleData.intData = 576;
+            sampleData.floatData = 3.142f;
+            sampleData.strData = "Sample String";
+            sampleData.dateData = new DateTime(2018, 1, 1);
+
+            sampleData.customObject = new CustomObject();
+            sampleData.customObject.Str = "customObject String";
+            sampleData.customObject.Int = 123;
+
+            sampleData.strArrayData = new string[5];
+            sampleData.strArrayData[0] = "First item";
+            sampleData.strArrayData[1] = "Second item";
+            sampleData.strArrayData[2] = "Third item";
+            sampleData.strArrayData[3] = "Forth item";
+            sampleData.strArrayData[4] = "Fifth item";
+
+            sampleData.intList = new List<int>();
+            sampleData.intList.Add(0);
+            sampleData.intList.Add(1);
+            sampleData.intList.Add(2);
+
+            return (sampleData);
+        }
+        #endregion
+
+        #region /API/HUD/
+        // API to display the HUD Windows
+        public class ApiHudTable
+        {
+            public int nRows;
+            public int nCols;
+            public string[] values;
+
+            public ApiHudTable(int nRows, int nCols, string[] values)
+            {
+                this.nRows = nRows;
+                this.nCols = nCols;
+                this.values = values;
+            }
+        }
+
+        public class HudApiArray
+        {
+            public int nTables;
+            public ApiHudTable commonTable;
+            public ApiHudTable extraTable;
+        }
+
+        public object ApiHud(string Parameters)
+        {
+            if (Parameters == null)
+                return (null);
+
+            int index = Parameters.IndexOf('=');
+            if (index == -1)
+                return (null);
+            string strPageno = Parameters.Substring(index + 1, Parameters.Length - index - 1);
+            strPageno = strPageno.Trim();
+            int pageNo = Int32.Parse(strPageno);
+
+            var hudApiArray = new HudApiArray();
+
+            hudApiArray.commonTable = ApiProcessHudTable(0);
+            if (pageNo == 0)
+            {
+                hudApiArray.nTables = 1;
+                hudApiArray.extraTable = null;
+            }
+            else
+            {
+                hudApiArray.nTables = 2;
+                hudApiArray.extraTable = ApiProcessHudTable(pageNo);
+            }
+            return hudApiArray;
+        }
+
+        public ApiHudTable ApiProcessHudTable(int pageNo)
+        {
+            Viewer3D.Popups.HUDWindow.TableData hudTable = Viewer.HUDWindow.PrepareTable(pageNo);
+
+            var apiTable = new ApiHudTable
+                (hudTable.Cells.GetLength(0)
+                , hudTable.Cells.GetLength(1)
+                , new string[hudTable.Cells.GetLength(0) * hudTable.Cells.GetLength(1)]
+                );
+            try
+            {
+                var nextCell = 0;
+                for (int i = 0; i < apiTable.nRows; ++i)
+                {
+                    for (int j = 0; j < apiTable.nCols; ++j)
+                    {
+                        apiTable.values[nextCell++] = hudTable.Cells[i, j];
+                    }
+                }
+            }
+            catch (Exception e)
+            {
+                Trace.WriteLine(e.Message);
+            }
+            return (apiTable);
+        }
+        #endregion
+
+        #region /API/TrackMonitor/
+        // Provides most of the data in the Track Monitor F4
+        public class TrackMonitorInfo
+        {
+            public Train.TRAIN_CONTROL controlMode;          // present control mode 
+            public float speedMpS;                           // present speed
+            public float projectedSpeedMpS;                  // projected speed
+            public float allowedSpeedMpS;                    // max allowed speed
+            public float currentElevationPercent;            // elevation %
+            public int direction;                            // present direction (0=forward, 1=backward)
+            public int cabOrientation;                       // present cab orientation (0=forward, 1=backward)
+            public bool isOnPath;                            // train is on defined path (valid in Manual mode only)
+        }
+
+        public object ApiTrackMonitor(string Parameters)
+        {
+            var trainInfo = Viewer.PlayerTrain.GetTrainInfo();
+
+            return new TrackMonitorInfo
+            { controlMode = trainInfo.ControlMode
+            , speedMpS = trainInfo.speedMpS
+            , projectedSpeedMpS = trainInfo.projectedSpeedMpS
+            , allowedSpeedMpS = trainInfo.allowedSpeedMpS
+            , currentElevationPercent = trainInfo.currentElevationPercent
+            , direction = trainInfo.direction
+            , cabOrientation = trainInfo.cabOrientation
+            , isOnPath = trainInfo.isOnPath
+            };
+        }
+        #endregion
+    }
+}
diff --git a/Source/RunActivity/Viewer3D/WebServices/WebServer.cs b/Source/RunActivity/Viewer3D/WebServices/WebServer.cs
index 664df03..6fb65ca 100644
--- a/Source/RunActivity/Viewer3D/WebServices/WebServer.cs
+++ b/Source/RunActivity/Viewer3D/WebServices/WebServer.cs
@@ -15,17 +15,9 @@
 // You should have received a copy of the GNU General Public License
 // along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.
 //
-// ===========================================================================================
-//      Open Rails Web Server
-//      The following files have been modified to accomodate the WebServer
-//          Game.cs
-//          HUDWindow.cs
-//          WebServerProcess.cs
-//          search for "WebServer" to find all occurrences
-//
-//      djr - 20171221
-// ===========================================================================================
+// Based on original work by Dan Reynolds 2017-12-21
 
+using Newtonsoft.Json;
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
@@ -34,15 +26,10 @@
 using System.Net.Sockets;
 using System.Text;
 using System.Threading;
-using Newtonsoft.Json;
-using Orts.Simulation;
-using Orts.Simulation.Physics;
 
 namespace Orts.Viewer3D.WebServices
 {
-    // =================================================================
     // State object for reading client data asynchronously
-    // =================================================================
     public class StateObject
     {
         public Socket WorkSocket = null;                    // Client  socket.
@@ -50,9 +37,7 @@ public class StateObject
         public byte[] Buffer = new byte[BufferSize];        // Receive buffer.
     }
 
-    // ==================================================================
-    // 		class for holding HTTP Request data
-    // ==================================================================
+    // class for holding HTTP Request data
     public class HttpRequest
     {
         public Socket ClientSocket = null;
@@ -63,9 +48,7 @@ public class HttpRequest
         public Dictionary<string, string> Headers { get => headers; set => headers = value; }
     }
 
-    // ==================================================================
-    // 		class for holding HTTP Resonse data
-    // ==================================================================
+    // class for holding HTTP Response data
     public class HttpResponse
     {
         public Socket ClientSocket = null;
@@ -75,9 +58,7 @@ public class HttpResponse
         public byte[] byteContent;
     }
 
-    // ====================================================================
-    //  TCP/IP Sockets WebServer
-    // ====================================================================
+    // TCP/IP Sockets WebServer
     public class WebServer
     {
         private bool Running = false;
@@ -88,56 +69,44 @@ public class WebServer
         private IPAddress ipAddress = null;
         private int Port = 0;
         private int MaxConnections = 0;
+        private WebApi WebApi;
 
-        // ===========================================================================================
-        // 		Thread signal.
-        // ===========================================================================================
+        // Thread signal.
         private static ManualResetEvent allDone = new ManualResetEvent(false);
 
-        // ===========================================================================================
-        // File exstensions this server will handle - any other extensions are returns as not found
-        // ===========================================================================================
+        // File extensions this server will handle - any other extensions are returned as not found
         private static Dictionary<string, string> extensions = new Dictionary<string, string>()
         {
-            { "htm",  "text/html" },
-            { "html", "text/html" },
-            { "txt",  "text/plain" },
-            { "css",  "text/css" },
-            { "xml",  "application/xml" },
-            { "js",   "application/javascript" },
-            { "json", "application/json" },
-            { "ico",  "image/x-icon" },
-            { "png",  "image/png" },
-            { "gif",  "image/gif" },
-            { "jpg",  "image/jpg" },
-            { "jpeg", "image/jpeg" }
+            { "HTM",  "text/html" },
+            { "HTML", "text/html" },
+            { "TXT",  "text/plain" },
+            { "CSS",  "text/css" },
+            { "XML",  "application/xml" },
+            { "JS",   "application/javascript" },
+            { "JSON", "application/json" },
+            { "ICO",  "image/x-icon" },
+            { "PNG",  "image/png" },
+            { "GIF",  "image/gif" },
+            { "JPG",  "image/jpg" },
+            { "JPEG", "image/jpeg" }
         };
 
         public Dictionary<string, string> Extensions { get => extensions; set => extensions = value; }
 
-        // ===========================================================================================
-        //      Viewer object from Viewer3D - needed for acces to Heads Up Display Data
-        // ===========================================================================================
+        // Viewer object from Viewer3D - needed by APIs
         public Viewer viewer;
 
-        // ===========================================================================================
-        //  	WebServer constructor
-        // ===========================================================================================
+        // WebServer constructor
         public WebServer(string ipAddr, int port, int maxConnections, string path)
         {
             ipAddress = IPAddress.Parse(ipAddr);
             Port = port;
             ContentPath = path;
             MaxConnections = maxConnections;
-            ApiDict.Add("/API/HUD", ApiHUD);
-            ApiDict.Add("/API/APISAMPLE", ApiSample);
-            ApiDict.Add("/API/TRACKMONITOR", ApiTrackMonitor);
-            ApiDict.Add("/API/TRAININFO", ApiTrainInfo);
+            WebApi = new WebApi();
             return;
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
         public void Run()
         {
             if (Running)
@@ -147,6 +116,9 @@ public void Run()
             while ((viewer = Program.Viewer) == null)
                 Thread.Sleep(1000);
 
+            // Pass the viewer so that APIs can access its data
+            WebApi.Viewer = viewer;
+
             try
             {
                 ServerSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
@@ -189,8 +161,6 @@ public void Run()
             }
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
         public void acceptCallback(IAsyncResult ar)
         {
             // wjc if we stopped the thread just leave
@@ -198,9 +168,11 @@ public void acceptCallback(IAsyncResult ar)
             {
                 // Signal the main thread to continue.
                 allDone.Set();
+
                 // Get the socket that handles the client request.
                 Socket listener = (Socket)ar.AsyncState;
                 Socket handler = listener.EndAccept(ar);
+
                 // Create the state object.
                 StateObject state = new StateObject();
                 state.WorkSocket = handler;
@@ -209,9 +181,7 @@ public void acceptCallback(IAsyncResult ar)
             }
         }
 
-        // ===========================================================================================
-        // 		Main processing loop - read request and call  response functions
-        // ===========================================================================================
+        // Main processing loop - read request and call response functions
         public static void receiveCallback(IAsyncResult ar)
         {
             // Retrieve the state object and the handler socket
@@ -229,7 +199,7 @@ public static void receiveCallback(IAsyncResult ar)
             }
             catch (Exception e)
             {
-                Console.WriteLine("Exception instantiate StreamReader: " + e.Message);
+                Console.WriteLine("Exception instantiating StreamReader: " + e.Message);
                 return;
             }
             while (streamReader.Peek() > -1)
@@ -247,7 +217,7 @@ public static void receiveCallback(IAsyncResult ar)
                         ProcessGet(request, response);
                     }
                     else
-                        sendNotImplemented(response);
+                        SendRequestMethodNotImplemented(response);
                     return;
                 }
                 else if (request.Method.Equals(""))
@@ -267,7 +237,7 @@ public static void receiveCallback(IAsyncResult ar)
 
                     if (!request.Method.Equals("GET") && !request.Method.Equals("POST"))
                     {
-                        sendNotImplemented(response);
+                        SendRequestMethodNotImplemented(response);
                         return;
                     }
                 }
@@ -275,11 +245,11 @@ public static void receiveCallback(IAsyncResult ar)
                 {
                     try
                     {
-                        int seperator = lineRead.IndexOf(':');
-                        string heading = lineRead.Substring(0, seperator);
+                        int separator = lineRead.IndexOf(':');
+                        string heading = lineRead.Substring(0, separator);
                         heading = heading.Trim();
-                        ++seperator;
-                        string value = lineRead.Substring(seperator);
+                        ++separator;
+                        string value = lineRead.Substring(separator);
                         value = value.Trim();
                         request.Headers.Add(heading, value);
                     }
@@ -293,11 +263,9 @@ public static void receiveCallback(IAsyncResult ar)
                     break;
                 }
             }
-            sendServerError(response);
+            SendServerError(response);
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
         public void stop()
         {
             if (Running)
@@ -312,7 +280,7 @@ public void stop()
                     //ServerSocket.Shutdown(SocketShutdown.Both);
                     //tcpListener.Stop();
                     ServerSocket.Close();
-                    
+
                 }
                 catch (Exception e)
                 {
@@ -323,72 +291,133 @@ public void stop()
             }
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
         private static void ProcessPost(HttpRequest request, HttpResponse response)
         {
-            request.URI = request.URI.Replace('\\', '/');
-            request.URI = request.URI.ToUpper();
-            if (!request.URI.StartsWith("/API/"))
+            // Convert "%20" to " " etc.
+            request.URI = WebUtility.HtmlDecode(request.URI);
+
+            var uri = request.URI.ToUpper();
+            if (uri.StartsWith("/API/") && uri.EndsWith("/CALL_API"))
             {
-                Console.WriteLine("Post Method - API Not Implemented [{0}]", request.URI);
-                sendNotImplemented(response);
+                ExecuteAPI(uri, request.Parameters, response);
                 return;
             }
-            response.strContent = ExecuteApi(request.URI, request.Parameters);
-            response.ContentType = "application/json";
-            sendOkResponse(response);
-        }
-
-        // ===========================================================================================
-        // ===========================================================================================
-        private static void ProcessGetAPI(HttpRequest request, HttpResponse response)
-        {
-            sendNotImplemented(response);
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
         private static void ProcessGet(HttpRequest request, HttpResponse response)
         {
-            request.URI = request.URI.Replace("/", "\\").Replace("\\..", "");
-            if (request.URI.StartsWith("/API/"))
+            // http://127.0.0.1:2150/API/HUD/hud.html
+            // or
+            // http://127.0.0.1:2150/API/HUD/ which will be extended to http://127.0.0.1:2150/API/HUD/index.html
+            //
+            // http://127.0.0.1:2150/API/HUD is not acceptable.
+
+            // Convert "%20" to " " etc.
+            request.URI = WebUtility.HtmlDecode(request.URI);
+
+            // Get any parameters
+            var requestParts = request.URI.Split('?');
+            var uri = requestParts[0].ToUpper();
+            var parameters = "";
+            if (requestParts.Length > 1)
+                parameters = requestParts[1];
+
+            // For efficiency, check for API first
+            if (uri.StartsWith("/API/") && uri.EndsWith("/CALL_API"))
             {
-                ProcessGetAPI(request, response);
+                ExecuteAPI(uri, parameters, response);
                 return;
             }
-            int length = request.URI.Length;
-            int start = request.URI.LastIndexOf('.');
-            if (start == -1)
+            else if (parameters != "")
             {
-                if (request.URI.Substring(length - 1, 1) != "\\")
-                    request.URI += "\\";
-                request.URI += "index.html";
+                SendApiBadlyFormed(response, request.URI);
+                return;
             }
-            start = request.URI.LastIndexOf('.');
-            length = request.URI.Length - start - 1;
-            string extension = request.URI.Substring(start + 1, length);
-            if (extensions.ContainsKey(extension))
+
+            SendFileContents(response, uri);
+        }
+
+        private static void ExecuteAPI(string uri, string parameters, HttpResponse response)
+        {
+            // Trim off the final "CALL_API"
+            var apiName = uri.Substring(0, uri.Length - "CALL_API".Length);
+
+            Func<string, object> apiMethod;
+            if (!WebApi.ApiDict.TryGetValue(apiName, out apiMethod))
             {
-                if (File.Exists(ContentPath + request.URI))
+                SendApiNotFound(response, uri);
+                return;
+            }
+
+            object result = apiMethod(parameters);
+            response.strContent = JsonConvert.SerializeObject(result, Formatting.Indented);
+            response.ContentType = "application/json";
+            SendOkResponse(response);
+        }
+
+        private static void SendFileContents(HttpResponse response, string uri)
+        {
+            // Convert URL to folder specification
+            var filePath = uri.Replace("/", @"\");
+
+            var fullFilePath = ContentPath + filePath;
+            var extension = Path.GetExtension(fullFilePath).ToUpper();
+
+            if ( ! File.Exists(fullFilePath))
+            {
+                // Perhaps it's a folder
+                if (extension == "")
                 {
-                    byte[] bytes = File.ReadAllBytes(ContentPath + request.URI);
-                    response.byteContent = new byte[bytes.Length];
-                    response.byteContent = bytes;
-                    response.ContentType = extensions[extension];
-                    sendOkResponse(response);
+                    // Note: Can accept URL = "/API/HUD/" which get extended to "/API/HUD/index.html"
+                    // Cannot accept URL = "/API/HUD". If we did, then the browser would interpret  
+                    //  <script src="index.js"></script>
+                    // as "/API/index.js"
+
+                    if (fullFilePath.EndsWith(@"\"))
+                    {
+                        // Append a default webpage
+                        var fullFilePath1 = fullFilePath;
+                        fullFilePath += "index.html";
+
+                        if (!File.Exists(fullFilePath))
+                        {  // The URL+index.html doesn't exist as a file
+                            SendFileNotFound(response, fullFilePath1, fullFilePath);
+                            return;
+                        }
+                        extension = Path.GetExtension(fullFilePath).ToUpper();
+                    }
+                    else
+                    {   // The URL doesn't exist as a file
+                        SendFileNotFound(response, fullFilePath);
+                        return;
+                    }
                 }
                 else
-                    sendNotFound(response); // We don't support this extension. We are assuming that it doesn't exist.
+                {   // The URL doesn't exist as a file
+                    SendFileNotFound(response, fullFilePath);
+                    return;
+                }
+            }
+
+            // Check the extension
+            // Remove the leading "."
+            extension = extension.Replace(".", "");
+            if (!extensions.ContainsKey(extension))
+            {
+                SendExtensionNotImplemented(response, extension);
+                return;
             }
-            else
-                sendNotImplemented(response);
+
+            // Get the file content
+            byte[] bytes = File.ReadAllBytes(fullFilePath);
+            response.byteContent = new byte[bytes.Length];
+            response.byteContent = bytes;
+            response.ContentType = extensions[extension];
+            SendOkResponse(response);
             return;
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
-        private static void HTMLContent(HttpResponse response)
+        private static void HTMLContent(HttpResponse response, string embed)
         {
             response.strContent = "<!doctype HTML>" +
                                   "<html>" +
@@ -398,49 +427,62 @@ private static void HTMLContent(HttpResponse response)
                                   "</head>" +
                                   "<body>" +
                                   "<h1>OpenRails WebServer</h1>" +
-                                  "<div>" + response.ResponseCode + "</div>" + "" +
+                                  "<div>" + embed + "</div>" + "" +
                                   "</body></html>";
-
             return;
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
-        private static void sendNotImplemented(HttpResponse response)
+        private static void SendRequestMethodNotImplemented(HttpResponse response)
         {
-            response.ResponseCode = "501 Not Implemented";
-            HTMLContent(response);
+            response.ResponseCode = "200 OK";
+            HTMLContent(response, $"501 Request method not implemented");
             SendHttp(response);
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
-        private static void sendNotFound(HttpResponse response)
+        private static void SendExtensionNotImplemented(HttpResponse response, string extension)
         {
-            response.ResponseCode = "404 Not Found";
-            HTMLContent(response);
+            response.ResponseCode = "200 OK";
+            HTMLContent(response, $"501 Extension {extension} not implemented");
             SendHttp(response);
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
-        private static void sendServerError(HttpResponse response)
+        private static void SendApiNotFound(HttpResponse response, string apiName)
         {
-            response.ResponseCode = "500 Internal Server Error";
-            HTMLContent(response);
+            response.ResponseCode = "200 OK";
+            HTMLContent(response, $"501 API {apiName} not found");
             SendHttp(response);
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
-        private static void sendOkResponse(HttpResponse response)
+        private static void SendApiBadlyFormed(HttpResponse response, string uri)
+        {
+            response.ResponseCode = "200 OK";
+            HTMLContent(response, $"501 API {uri} badly formed. Must start with 'API/'");
+            SendHttp(response);
+        }
+
+        private static void SendFileNotFound(HttpResponse response, string filePath1, string filePath2 = null)
+        {
+            response.ResponseCode = "200 OK";
+            HTMLContent(response, 
+                (filePath2 == null) 
+                ? $"404 File \"{filePath1}\" not found"
+                : $"404 Neither file \"{filePath1}\" nor \"{filePath2}\" found");
+            SendHttp(response);
+        }
+
+        private static void SendServerError(HttpResponse response)
+        {
+            response.ResponseCode = "200 OK";
+            HTMLContent(response, "500 Internal web-server error");
+            SendHttp(response);
+        }
+
+        private static void SendOkResponse(HttpResponse response)
         {
             response.ResponseCode = "200 OK";
             SendHttp(response);
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
         private static void SendHttp(HttpResponse response)
         {
             // Convert the string data to byte data using ASCII encoding.
@@ -464,8 +506,6 @@ private static void SendHttp(HttpResponse response)
                                              response.ClientSocket);
         }
 
-        // ===========================================================================================
-        // ===========================================================================================
         private static void SendHttpCallback(IAsyncResult ar)
         {
             try
@@ -484,165 +524,5 @@ private static void SendHttpCallback(IAsyncResult ar)
                 Console.WriteLine("Exception Send CallBack: " + e.ToString());
             }
         }
-
-        // ===========================================================================================
-        // 		API routing classes & functions
-        // ===========================================================================================
-        public static Dictionary<string, Func<string, object>> ApiDict = new Dictionary<string, Func<string, object>>();
-
-        public static string ExecuteApi(string apiName, string Parameters)
-        {
-            Func<string, object> apiMethod;
-            if (!ApiDict.TryGetValue(apiName, out apiMethod))
-            {
-                Console.WriteLine("Not Found"); //TODO
-            }
-            object result = apiMethod(Parameters);
-            string json = JsonConvert.SerializeObject(result, Formatting.Indented);
-            return json;
-        }
-
-        // =======================================================================================
-        // 		API for Sample Data
-        // =======================================================================================
-
-
-        public class Embedded
-        {
-            public string Str;
-            public int Numb;
-        }
-        public class ApiSampleData
-        {
-            public int intData;
-            public string strData;
-            public DateTime dateData;
-            public Embedded embedded;
-            public string[] strArrayData;
-        }
-
-        // -------------------------------------------------------------------------------------------
-        public object ApiSample(string Parameters)
-        {
-            ApiSampleData sampleData = new ApiSampleData();
-
-            sampleData.intData = 576;
-            sampleData.strData = "Sample String";
-            sampleData.dateData = new DateTime(2018, 1, 1);
-
-            sampleData.embedded = new Embedded();
-            sampleData.embedded.Str = "Embeddded String";
-            sampleData.embedded.Numb = 123;
-
-            sampleData.strArrayData = new string[5];
-
-            sampleData.strArrayData[0] = "First member";
-            sampleData.strArrayData[1] = "Second member";
-            sampleData.strArrayData[2] = "Third Member";
-            sampleData.strArrayData[3] = "Forth member";
-            sampleData.strArrayData[4] = "Fifth member";
-
-            return (sampleData);
-        }
-
-        // =======================================================================================
-        // 		API to display the HUD Windows
-        // ======================================================================================= 
-        public class HudApiTable
-        {
-            public int nRows;
-            public int nCols;
-            public string[] values;
-        }
-
-        // -------------------------------------------------------------------------------------------
-        public class HudApiArray
-        {
-            public int nTables;
-            public HudApiTable commonTable;
-            public HudApiTable extraTable;
-        }
-
-
-        // -------------------------------------------------------------------------------------------
-        public object ApiHUD(string Parameters)
-        {
-            int index = Parameters.IndexOf('=');
-            if (index == -1)
-                return (null);
-            string strPageno = Parameters.Substring(index + 1, Parameters.Length - index - 1);
-            strPageno = strPageno.Trim();
-            int pageNo = Int32.Parse(strPageno);
-
-            HudApiArray hudApiArray = new HudApiArray();
-            hudApiArray.nTables = 1;
-
-            hudApiArray.commonTable = ApiHUD_ProcessTable(0);
-            if (pageNo > 0)
-            {
-                hudApiArray.nTables = 2;
-                hudApiArray.extraTable = ApiHUD_ProcessTable(pageNo);
-            }
-            return hudApiArray;
-        }
-
-        // -------------------------------------------------------------------------------------------
-        public HudApiTable ApiHUD_ProcessTable(int pageNo)
-        {
-            int nRows = 0;
-            int nCols = 0;
-            int nextCell = 0;
-
-            Viewer3D.Popups.HUDWindow.TableData hudTable = viewer.HUDWindow.PrepareTable(pageNo);
-
-            HudApiTable apiTable = new HudApiTable();
-
-            apiTable.nRows = hudTable.Cells.GetLength(0);
-            nRows = apiTable.nRows;
-            apiTable.nCols = hudTable.Cells.GetLength(1);
-            nCols = apiTable.nCols;
-            apiTable.values = new string[nRows * nCols];
-
-            try
-            {
-                for (int i = 0; i < nRows; ++i)
-                {
-                    for (int j = 0; j < nCols; ++j)
-                    {
-                        apiTable.values[nextCell++] = hudTable.Cells[i, j];
-                    }
-                }
-            }
-            catch (Exception e)
-            {
-                Trace.WriteLine(e.Message);
-            }
-            return (apiTable);
-        }
-
-        // =======================================================================================
-        // 		API for Track Monitor Data
-        // =======================================================================================
-
-        // -------------------------------------------------------------------------------------------
-        public object ApiTrackMonitor(string Parameters)
-        {
-            Train.TrainInfo trainInfo = viewer.PlayerTrain.GetTrainInfo();
-
-            return (trainInfo);
-
-        }
-
-        // =======================================================================================
-        // 		API for Train Info
-        // =======================================================================================
-
-        // -------------------------------------------------------------------------------------------
-        public object ApiTrainInfo(string Parameters)
-        {
-            Train.TrainInfo trainInfo = viewer.PlayerTrain.GetTrainInfo();
-
-            return (trainInfo);
-        }
     }
 }
\ No newline at end of file
